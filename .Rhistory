hektometer = 1 / 100,
sentimeter = 100,
milimeter = 1000
)
# Periksa apakah unit diketahui
if (!(from_unit %in% names(conversion_factors)) || !(to_unit %in% names(conversion_factors))) {
stop("Unit tidak dikenal untuk konversi panjang")
}
# Konversi ke meter, lalu ke unit tujuan
value_in_base <- value / conversion_factors[[from_unit]] # Mengubah ke meter
result <- value_in_base * conversion_factors[[to_unit]] # Mengubah ke unit tujuan
return(result)
}
# Fungsi Konversi Time (Waktu)
#' Mengonversi Waktu
#'
#' Fungsi ini mengonversi nilai waktu dari satu satuan ke satuan lainnya.
#'
#' @param value Nilai waktu yang ingin dikonversi.
#' @param from_unit Satuan asal (misal: "detik", "menit", "jam").
#' @param to_unit Satuan tujuan (misal: "menit", "jam", "hari").
#' @return Nilai waktu dalam satuan tujuan.
#' @export
time <- function(value, from_unit, to_unit) {
conversion_factors <- list(
detik = 1,
menit = 1 / 60,
jam = 1 / 3600,
hari = 1 / 86400,
milidetik = 1000,
# Konversi tambahan
detik_to_menit = 1 / 60,
detik_to_jam = 1 / 3600,
detik_to_hari = 1 / 86400,
detik_to_milidetik = 1000,
menit_to_detik = 60,
menit_to_jam = 1 / 60,
menit_to_hari = 1 / 1440,
menit_to_milidetik = 60000,
jam_to_detik = 3600,
jam_to_menit = 60,
jam_to_hari = 1 / 24,
jam_to_milidetik = 3.6e6,
hari_to_detik = 86400,
hari_to_menit = 1440,
hari_to_jam = 24,
hari_to_milidetik = 8.64e7,
milidetik_to_detik = 1 / 1000,
milidetik_to_menit = 1 / 60000,
milidetik_to_jam = 1 / 3.6e6,
milidetik_to_hari = 1 / 8.64e7
)
if (!(from_unit %in% names(conversion_factors)) || !(to_unit %in% names(conversion_factors))) {
stop("Unit tidak dikenal untuk konversi waktu")
}
value_in_seconds <- value / conversion_factors[[from_unit]]
result <- value_in_seconds * conversion_factors[[to_unit]]
return(result)
}
# Fungsi Konversi Temperature (Suhu)
#' Mengonversi Suhu
#'
#' Fungsi ini mengonversi nilai suhu dari satu satuan ke satuan lainnya.
#'
#' @param value Nilai suhu yang ingin dikonversi.
#' @param from_unit Satuan asal (misal: "celcius", "fahrenheit", "reamur").
#' @param to_unit Satuan tujuan (misal: "fahrenheit", "kelvin", "reamur").
#' @return Nilai suhu dalam satuan tujuan.
#' @export
# Fungsi Konversi Temperature (Suhu)
temp <- function(value, from_unit, to_unit) {
if (from_unit == "celcius" && to_unit == "fahrenheit") {
return((value * 9/5) + 32)
} else if (from_unit == "fahrenheit" && to_unit == "celcius") {
return((value - 32) * 5/9)
} else if (from_unit == "celcius" && to_unit == "kelvin") {
return(value + 273.15)
} else if (from_unit == "kelvin" && to_unit == "celcius") {
return(value - 273.15)
} else if (from_unit == "celcius" && to_unit == "reamur") {
return(value * 4/5)
} else if (from_unit == "reamur" && to_unit == "celcius") {
return(value * 5/4)
} else if (from_unit == "reamur" && to_unit == "fahrenheit") {
return((value * 9/4) + 32)
} else if (from_unit == "fahrenheit" && to_unit == "reamur") {
return((value - 32) * 4/9)
} else if (from_unit == "reamur" && to_unit == "kelvin") {
return((value * 5/4) + 273.15)
} else if (from_unit == "kelvin" && to_unit == "reamur") {
return((value - 273.15) * 4/5)
} else if (from_unit == "fahrenheit" && to_unit == "kelvin") {
return((value - 32) * 5/9 + 273.15)
} else if (from_unit == "kelvin" && to_unit == "fahrenheit") {
return((value - 273.15) * 9/5 + 32)
} else {
stop("Unit tidak dikenal untuk konversi suhu")
}
}
# Fungsi Konversi Mass (Massa)
#' Mengonversi Massa
#'
#' Fungsi ini mengonversi nilai massa dari satu satuan ke satuan lainnya.
#'
#' @param value Nilai massa yang ingin dikonversi.
#' @param from_unit Satuan asal (misal: "gram", "kilogram", "miligram").
#' @param to_unit Satuan tujuan (misal: "kilogram", "ton", "kwintal").
#' @return Nilai massa dalam satuan tujuan.
#' @export
mass <- function(value, from_unit, to_unit) {
# Faktor konversi relatif terhadap gram
conversion_factors <- list(
gram = 1,
kilogram = 1 / 1000,
miligram = 1000,
ton = 1 / 1e6,
kwintal = 1 / 1e5
)
# Periksa apakah unit diketahui
if (!(from_unit %in% names(conversion_factors)) || !(to_unit %in% names(conversion_factors))) {
stop("Unit tidak dikenal untuk konversi massa")
}
# Konversi ke gram, lalu ke unit tujuan
value_in_grams <- value / conversion_factors[[from_unit]] # Mengubah ke gram
result <- value_in_grams * conversion_factors[[to_unit]] # Mengubah ke unit tujuan
return(result)
}
#' Mengonversi Data Storage
#'
#' Fungsi ini mengonversi nilai data storage dari satu satuan ke satuan lainnya.
#'
#' @param value Nilai data storage yang ingin dikonversi.
#' @param from_unit Satuan asal (misal: "bit", "byte", "kilobyte").
#' @param to_unit Satuan tujuan (misal: "megabyte", "gigabyte").
#' @return Nilai data storage dalam satuan tujuan.
#' @export
storage_convert <- function(value, from_unit, to_unit) {
# Faktor konversi data storage
conversion_factors <- list(
bit = 1,
byte = 8,
kilobyte = 1024,
megabyte = 1024^2,
gigabyte = 1024^3,
terabyte = 1024^4,
petabyte = 1024^5,
exabyte = 1024^6,
zettabyte = 1024^7,
yottabyte = 1024^8,
brontobyte = 1024^9
)
# Cek apakah unit asal dan tujuan ada dalam konversi
if (!(from_unit %in% names(conversion_factors)) || !(to_unit %in% names(conversion_factors))) {
stop("Unit tidak dikenal untuk konversi storage")
}
# Konversi nilai ke bit sebagai satuan dasar
value_in_bits <- value * conversion_factors[[from_unit]]
# Konversi nilai ke satuan tujuan
result <- value_in_bits / conversion_factors[[to_unit]]
return(result)
}#' Mengonversi Data Storage
#'
#' Fungsi ini mengonversi nilai data storage dari satu satuan ke satuan lainnya.
#'
#' @param value Nilai data storage yang ingin dikonversi.
#' @param from_unit Satuan asal (misal: "bit", "byte", "kilobyte").
#' @param to_unit Satuan tujuan (misal: "megabyte", "gigabyte").
#' @return Nilai data storage dalam satuan tujuan.
#' @export
storage <- function(value, from_unit, to_unit) {
# Faktor konversi data storage
conversion_factors <- list(
bit = 1,
byte = 8,
kilobyte = 1024,
megabyte = 1024^2,
gigabyte = 1024^3,
terabyte = 1024^4,
petabyte = 1024^5,
exabyte = 1024^6,
zettabyte = 1024^7,
yottabyte = 1024^8,
brontobyte = 1024^9
)
# Cek apakah unit asal dan tujuan ada dalam konversi
if (!(from_unit %in% names(conversion_factors)) || !(to_unit %in% names(conversion_factors))) {
stop("Unit tidak dikenal untuk konversi storage")
}
# Konversi nilai ke bit sebagai satuan dasar
value_in_bits <- value * conversion_factors[[from_unit]]
# Konversi nilai ke satuan tujuan
result <- value_in_bits / conversion_factors[[to_unit]]
return(result)
}
# Function to Convert Length
#' Convert Length
#'
#' This function converts length values from one unit to another.
#'
#' @param value The length value to be converted.
#' @param from_unit The source unit (e.g., "meter", "kilometer", "millimeter").
#' @param to_unit The target unit (e.g., "kilometer", "meter", "millimeter").
#' @return The length value in the target unit.
#' @export
length <- function(value, from_unit, to_unit) {
# Conversion factors relative to meter
conversion_factors <- list(
meter = 1,
kilometer = 1 / 1000,
decimeter = 10,
decameter = 1 / 10,
hectometer = 1 / 100,
centimeter = 100,
millimeter = 1000
)
# Check if units are recognized
if (!(from_unit %in% names(conversion_factors)) || !(to_unit %in% names(conversion_factors))) {
stop("Unknown units for length conversion")
}
# Convert to meters, then to the target unit
value_in_base <- value / conversion_factors[[from_unit]] # Convert to meters
result <- value_in_base * conversion_factors[[to_unit]] # Convert to target unit
return(result)
}
# Function to Convert Time
#' Convert Time
#'
#' This function converts time values from one unit to another.
#'
#' @param value The time value to be converted.
#' @param from_unit The source unit (e.g., "second", "minute", "hour").
#' @param to_unit The target unit (e.g., "minute", "hour", "day").
#' @return The time value in the target unit.
#' @export
time <- function(value, from_unit, to_unit) {
conversion_factors <- list(
second = 1,
minute = 1 / 60,
hour = 1 / 3600,
day = 1 / 86400,
millisecond = 1000
)
# Check if units are recognized
if (!(from_unit %in% names(conversion_factors)) || !(to_unit %in% names(conversion_factors))) {
stop("Unknown units for time conversion")
}
# Convert to seconds, then to the target unit
value_in_seconds <- value / conversion_factors[[from_unit]]
result <- value_in_seconds * conversion_factors[[to_unit]]
return(result)
}
# Function to Convert Temperature
#' Convert Temperature
#'
#' This function converts temperature values from one unit to another.
#'
#' @param value The temperature value to be converted.
#' @param from_unit The source unit (e.g., "celsius", "fahrenheit", "reamur").
#' @param to_unit The target unit (e.g., "fahrenheit", "kelvin", "reamur").
#' @return The temperature value in the target unit.
#' @export
temp <- function(value, from_unit, to_unit) {
if (from_unit == "celsius" && to_unit == "fahrenheit") {
return((value * 9/5) + 32)
} else if (from_unit == "fahrenheit" && to_unit == "celsius") {
return((value - 32) * 5/9)
} else if (from_unit == "celsius" && to_unit == "kelvin") {
return(value + 273.15)
} else if (from_unit == "kelvin" && to_unit == "celsius") {
return(value - 273.15)
} else if (from_unit == "celsius" && to_unit == "reamur") {
return(value * 4/5)
} else if (from_unit == "reamur" && to_unit == "celsius") {
return(value * 5/4)
} else if (from_unit == "reamur" && to_unit == "fahrenheit") {
return((value * 9/4) + 32)
} else if (from_unit == "fahrenheit" && to_unit == "reamur") {
return((value - 32) * 4/9)
} else if (from_unit == "reamur" && to_unit == "kelvin") {
return((value * 5/4) + 273.15)
} else if (from_unit == "kelvin" && to_unit == "reamur") {
return((value - 273.15) * 4/5)
} else if (from_unit == "fahrenheit" && to_unit == "kelvin") {
return((value - 32) * 5/9 + 273.15)
} else if (from_unit == "kelvin" && to_unit == "fahrenheit") {
return((value - 273.15) * 9/5 + 32)
} else {
stop("Unknown units for temperature conversion")
}
}
# Function to Convert Mass
#' Convert Mass
#'
#' This function converts mass values from one unit to another.
#'
#' @param value The mass value to be converted.
#' @param from_unit The source unit (e.g., "gram", "kilogram", "milligram").
#' @param to_unit The target unit (e.g., "kilogram", "ton", "quintal").
#' @return The mass value in the target unit.
#' @export
mass <- function(value, from_unit, to_unit) {
# Conversion factors relative to gram
conversion_factors <- list(
gram = 1,
kilogram = 1 / 1000,
milligram = 1000,
ton = 1 / 1e6,
quintal = 1 / 1e5
)
# Check if units are recognized
if (!(from_unit %in% names(conversion_factors)) || !(to_unit %in% names(conversion_factors))) {
stop("Unknown units for mass conversion")
}
# Convert to grams, then to the target unit
value_in_grams <- value / conversion_factors[[from_unit]] # Convert to grams
result <- value_in_grams * conversion_factors[[to_unit]] # Convert to target unit
return(result)
}
# Function to Convert Data Storage
#' Convert Data Storage
#'
#' This function converts data storage values from one unit to another.
#'
#' @param value The data storage value to be converted.
#' @param from_unit The source unit (e.g., "bit", "byte", "kilobyte").
#' @param to_unit The target unit (e.g., "megabyte", "gigabyte").
#' @return The data storage value in the target unit.
#' @export
storage <- function(value, from_unit, to_unit) {
# Conversion factors for data storage
conversion_factors <- list(
bit = 1,
byte = 8,
kilobyte = 1024,
megabyte = 1024^2,
gigabyte = 1024^3,
terabyte = 1024^4,
petabyte = 1024^5,
exabyte = 1024^6,
zettabyte = 1024^7,
yottabyte = 1024^8,
brontobyte = 1024^9
)
# Check if units are recognized
if (!(from_unit %in% names(conversion_factors)) || !(to_unit %in% names(conversion_factors))) {
stop("Unknown units for storage conversion")
}
# Convert value to bits as the base unit
value_in_bits <- value * conversion_factors[[from_unit]]
# Convert value to the target unit
result <- value_in_bits / conversion_factors[[to_unit]]
return(result)
}
# Function to Convert Length
#' Convert Length
#'
#' This function converts length values from one unit to another.
#'
#' @param value The length value to be converted.
#' @param from_unit The source unit (e.g., "meter", "kilometer", "millimeter").
#' @param to_unit The target unit (e.g., "kilometer", "meter", "millimeter").
#' @return The length value in the target unit.
#' @export
length <- function(value, from_unit, to_unit) {
# Conversion factors relative to meter
conversion_factors <- list(
meter = 1,
kilometer = 1 / 1000,
decimeter = 10,
decameter = 1 / 10,
hectometer = 1 / 100,
centimeter = 100,
millimeter = 1000
)
# Check if units are recognized
if (!(from_unit %in% names(conversion_factors)) || !(to_unit %in% names(conversion_factors))) {
stop("Unknown units for length conversion")
}
# Convert to meters, then to the target unit
value_in_base <- value / conversion_factors[[from_unit]] # Convert to meters
result <- value_in_base * conversion_factors[[to_unit]] # Convert to target unit
return(result)
}
# Function to Convert Time
#' Convert Time
#'
#' This function converts time values from one unit to another.
#'
#' @param value The time value to be converted.
#' @param from_unit The source unit (e.g., "second", "minute", "hour").
#' @param to_unit The target unit (e.g., "minute", "hour", "day").
#' @return The time value in the target unit.
#' @export
time <- function(value, from_unit, to_unit) {
conversion_factors <- list(
second = 1,
minute = 1 / 60,
hour = 1 / 3600,
day = 1 / 86400,
millisecond = 1000
)
# Check if units are recognized
if (!(from_unit %in% names(conversion_factors)) || !(to_unit %in% names(conversion_factors))) {
stop("Unknown units for time conversion")
}
# Convert to seconds, then to the target unit
value_in_seconds <- value / conversion_factors[[from_unit]]
result <- value_in_seconds * conversion_factors[[to_unit]]
return(result)
}
# Function to Convert Temperature
#' Convert Temperature
#'
#' This function converts temperature values from one unit to another.
#'
#' @param value The temperature value to be converted.
#' @param from_unit The source unit (e.g., "celsius", "fahrenheit", "reamur").
#' @param to_unit The target unit (e.g., "fahrenheit", "kelvin", "reamur").
#' @return The temperature value in the target unit.
#' @export
temp <- function(value, from_unit, to_unit) {
if (from_unit == "celsius" && to_unit == "fahrenheit") {
return((value * 9/5) + 32)
} else if (from_unit == "fahrenheit" && to_unit == "celsius") {
return((value - 32) * 5/9)
} else if (from_unit == "celsius" && to_unit == "kelvin") {
return(value + 273.15)
} else if (from_unit == "kelvin" && to_unit == "celsius") {
return(value - 273.15)
} else if (from_unit == "celsius" && to_unit == "reamur") {
return(value * 4/5)
} else if (from_unit == "reamur" && to_unit == "celsius") {
return(value * 5/4)
} else if (from_unit == "reamur" && to_unit == "fahrenheit") {
return((value * 9/4) + 32)
} else if (from_unit == "fahrenheit" && to_unit == "reamur") {
return((value - 32) * 4/9)
} else if (from_unit == "reamur" && to_unit == "kelvin") {
return((value * 5/4) + 273.15)
} else if (from_unit == "kelvin" && to_unit == "reamur") {
return((value - 273.15) * 4/5)
} else if (from_unit == "fahrenheit" && to_unit == "kelvin") {
return((value - 32) * 5/9 + 273.15)
} else if (from_unit == "kelvin" && to_unit == "fahrenheit") {
return((value - 273.15) * 9/5 + 32)
} else {
stop("Unknown units for temperature conversion")
}
}
# Function to Convert Mass
#' Convert Mass
#'
#' This function converts mass values from one unit to another.
#'
#' @param value The mass value to be converted.
#' @param from_unit The source unit (e.g., "gram", "kilogram", "milligram").
#' @param to_unit The target unit (e.g., "kilogram", "ton", "quintal").
#' @return The mass value in the target unit.
#' @export
mass <- function(value, from_unit, to_unit) {
# Conversion factors relative to gram
conversion_factors <- list(
gram = 1,
kilogram = 1 / 1000,
milligram = 1000,
ton = 1 / 1e6,
quintal = 1 / 1e5
)
# Check if units are recognized
if (!(from_unit %in% names(conversion_factors)) || !(to_unit %in% names(conversion_factors))) {
stop("Unknown units for mass conversion")
}
# Convert to grams, then to the target unit
value_in_grams <- value / conversion_factors[[from_unit]] # Convert to grams
result <- value_in_grams * conversion_factors[[to_unit]] # Convert to target unit
return(result)
}
# Function to Convert Data Storage
#' Convert Data Storage
#'
#' This function converts data storage values from one unit to another.
#'
#' @param value The data storage value to be converted.
#' @param from_unit The source unit (e.g., "bit", "byte", "kilobyte").
#' @param to_unit The target unit (e.g., "megabyte", "gigabyte").
#' @return The data storage value in the target unit.
#' @export
storage <- function(value, from_unit, to_unit) {
# Conversion factors for data storage
conversion_factors <- list(
bit = 1,
byte = 8,
kilobyte = 1024,
megabyte = 1024^2,
gigabyte = 1024^3,
terabyte = 1024^4,
petabyte = 1024^5,
exabyte = 1024^6,
zettabyte = 1024^7,
yottabyte = 1024^8,
brontobyte = 1024^9
)
# Check if units are recognized
if (!(from_unit %in% names(conversion_factors)) || !(to_unit %in% names(conversion_factors))) {
stop("Unknown units for storage conversion")
}
# Convert value to bits as the base unit
value_in_bits <- value * conversion_factors[[from_unit]]
# Convert value to the target unit
result <- value_in_bits / conversion_factors[[to_unit]]
return(result)
}
